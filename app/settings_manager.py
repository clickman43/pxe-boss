import json, os, subprocess
from .schemas import NetworkSettings
PROJECT_DIR = os.getenv("PROJECT_DIR", "/srv/pxeboss")
SETTINGS_PATH = os.path.join(PROJECT_DIR, "configs/settings.json")
DNSMASQ_CONF_PATH = os.path.join(PROJECT_DIR, "configs/dnsmasq.conf")
TFTP_ROOT = os.path.join(PROJECT_DIR, "tftpboot")
def load_settings() -> dict:
    if not os.path.exists(SETTINGS_PATH): return {}
    with open(SETTINGS_PATH, "r") as f: return json.load(f)
def save_settings(settings: NetworkSettings):
    with open(SETTINGS_PATH, "w") as f: json.dump(settings.dict(), f, indent=2)
    generate_dnsmasq_conf(settings)
def generate_dnsmasq_conf(settings: NetworkSettings):
    conf = [f"interface={settings.interface}", "no-hosts", "no-resolv", f"dhcp-option=3,{settings.gateway_ip}", f"dhcp-option=6,{settings.dns_server}", "enable-tftp", f"tftp-root={TFTP_ROOT}", "log-dhcp"]
    if settings.dhcp_mode == "authoritative":
        conf.insert(1, "dhcp-authoritative")
        conf.append(f"dhcp-range={settings.dhcp_range_start},{settings.dhcp_range_end},255.255.255.0,12h")
    elif settings.dhcp_mode == "proxy": conf.append(f"dhcp-range={settings.server_ip},proxy")
    conf.append("dhcp-userclass=set:is_ipxe,iPXE")
    conf.append(f"dhcp-boot=tag:is_ipxe,http://{settings.server_ip}:8000/api/boot/script/${{net0/mac}}")
    conf.append("dhcp-boot=net:!is_ipxe,ipxe.pxe")
    with open(DNSMASQ_CONF_PATH, "w") as f: f.write("# Auto-generated by PXE-Boss\n" + "\n".join(conf) + "\n")
def apply_dnsmasq_settings():
    try:
        settings = load_settings(); generate_dnsmasq_conf(NetworkSettings(**settings))
        subprocess.run(["sudo", "systemctl", "restart", "dnsmasq.service"], check=True, capture_output=True, text=True)
        return {"success": True, "message": "dnsmasq service restarted successfully."}
    except Exception as e: return {"success": False, "message": f"An unexpected error occurred: {str(e)}"}
