#!/bin/bash
# ==============================================================================
# PXE-Boss Features (UI/Frontend) Update Script - ЦЯЛОСТНА ВЕРСИЯ СЪС SETTINGS
# ==============================================================================
set -e
APP_USER="clickman"
PROJECT_DIR="/srv/pxeboss"
TARGET_FILE="$PROJECT_DIR/app/web/templates/dashboard.html"

echo "--- Generating PXE-Boss Frontend (Complete, with Settings Page) ---"

cat <<'EOF' > "$TARGET_FILE"
<!DOCTYPE html>
<html lang="bg">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PXE-Boss Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .nav-link.active { background-color: #374151; color: #ffffff; } .nav-link.active svg { color: #3b82f6; }
        .no-scrollbar::-webkit-scrollbar { display: none; } .no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }
        .toggle-checkbox:checked { background-color: #22c55e; }
        .toggle-checkbox:checked + .toggle-label { transform: translateX(100%); border-color: #22c55e; }
    </style>
</head>
<body class="bg-gray-100 font-sans antialiased">
    <div class="flex h-screen bg-gray-200">
        <aside class="w-64 bg-gray-800 text-gray-200 flex-shrink-0 no-scrollbar overflow-y-auto">
            <div class="p-6"> <h1 class="text-2xl font-bold text-white">PXE-Boss</h1> </div>
            <nav id="main-nav" class="px-3">
                <a href="#dashboard" data-view="dashboard" class="nav-link flex items-center py-2.5 px-4 rounded-md transition duration-200 hover:bg-gray-700 active"><svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path></svg> Dashboard</a>
                <a href="#clients" data-view="clients" class="nav-link flex items-center py-2.5 px-4 rounded-md transition duration-200 hover:bg-gray-700"><svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path></svg> Clients</a>
                <a href="#images" data-view="images" class="nav-link flex items-center py-2.5 px-4 rounded-md transition duration-200 hover:bg-gray-700"><svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg> Images</a>
                <a href="#admin" data-view="admin" class="nav-link flex items-center py-2.5 px-4 rounded-md transition duration-200 hover:bg-gray-700"><svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg> Admin / Settings</a>
            </nav>
        </aside>
        <div class="flex-1 flex flex-col overflow-hidden">
            <header class="bg-white shadow-md p-4 flex justify-between items-center flex-shrink-0 text-sm"><div class="flex items-center space-x-4 text-gray-500"><div><strong>Server Time:</strong> <span id="server-time" class="font-mono">...</span></div><div class="border-l border-gray-300 pl-4"><strong>System Uptime:</strong> <span id="system-uptime" class="font-mono">...</span></div><div class="border-l border-gray-300 pl-4"><strong>App Uptime:</strong> <span id="app-uptime" class="font-mono">...</span></div></div><button id="logoutButton" title="Logout" class="text-gray-500 hover:text-red-600"><svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path></svg></button></header>
            <main class="flex-1 overflow-y-auto bg-gray-100 p-6 md:p-10">
                <div data-view-content="dashboard" class="view-content flex flex-col h-full"><div class="flex-shrink-0"><h2 class="text-3xl font-bold mb-6">Dashboard & Monitor</h2><div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6"><div class="bg-white p-6 rounded-lg shadow"><h3 class="font-bold text-lg mb-2">Active Clients</h3><p id="stats-active-clients" class="text-3xl font-semibold">0</p></div><div class="bg-white p-6 rounded-lg shadow"><h3 class="font-bold text-lg mb-2">Images</h3><p id="stats-images" class="text-3xl font-semibold">0</p></div><div class="bg-white p-6 rounded-lg shadow"><h3 class="font-bold text-lg mb-2">Pending</h3><p id="stats-pending" class="text-3xl font-semibold">0</p></div><div class="bg-white p-6 rounded-lg shadow"><h3 class="font-bold text-lg mb-2">Alarms</h3><p id="stats-alarms" class="text-3xl font-semibold text-green-500">0</p></div></div><div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6"><div class="bg-white p-4 rounded-lg shadow"><div class="flex justify-between items-center mb-1"><span class="font-bold text-gray-700">CPU Usage</span><span id="cpu-percent-text" class="text-sm font-semibold">0%</span></div><div class="w-full bg-gray-200 rounded-full h-2.5"><div id="cpu-percent-bar" class="bg-blue-600 h-2.5 rounded-full" style="width: 0%"></div></div></div><div class="bg-white p-4 rounded-lg shadow"><div class="flex justify-between items-center mb-1"><span class="font-bold text-gray-700">Memory Usage</span><span id="ram-percent-text" class="text-sm font-semibold">0%</span></div><div class="w-full bg-gray-200 rounded-full h-2.5"><div id="ram-percent-bar" class="bg-green-600 h-2.5 rounded-full" style="width: 0%"></div></div></div><div class="bg-white p-4 rounded-lg shadow"><div class="flex justify-between items-center mb-1"><span class="font-bold text-gray-700">Disk Usage (/)</span><span id="disk-percent-text" class="text-sm font-semibold">0%</span></div><div class="w-full bg-gray-200 rounded-full h-2.5"><div id="disk-percent-bar" class="bg-yellow-500 h-2.5 rounded-full" style="width: 0%"></div></div></div></div></div><div class="bg-white p-6 rounded-lg shadow flex-1 flex flex-col overflow-hidden"><h3 class="font-bold text-lg mb-4 flex-shrink-0">System Logs</h3><div id="logsContainer" class="text-xs font-mono bg-gray-900 text-green-400 p-4 rounded flex-1 overflow-y-auto no-scrollbar"></div></div></div>
                <div data-view-content="clients" class="view-content hidden"><h2 class="text-3xl font-bold mb-6">Clients Management</h2><div class="mb-8"><h3 class="text-xl font-semibold mb-4 text-gray-700">Pending Clients</h3><div class="bg-white p-6 rounded-lg shadow overflow-x-auto"><table class="min-w-full divide-y divide-gray-200"><thead class="bg-gray-50"><tr><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">MAC Address</th><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Last Seen</th><th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">Actions</th></tr></thead><tbody id="pending-clients-table" class="bg-white divide-y divide-gray-200"></tbody></table></div></div><div><div class="flex justify-between items-center mb-4"><h3 class="text-xl font-semibold text-gray-700">Registered Clients</h3><button id="add-client-btn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg flex items-center"><svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>Add Client</button></div><div class="bg-white p-6 rounded-lg shadow overflow-x-auto"><table class="min-w-full divide-y divide-gray-200"><thead class="bg-gray-50"><tr><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Name</th><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">MAC Address</th><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">OS Image</th><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th><th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">Actions</th></tr></thead><tbody id="registered-clients-table" class="bg-white divide-y divide-gray-200"></tbody></table></div></div></div>
                <div data-view-content="images" class="view-content hidden"><h2 class="text-3xl font-bold mb-6">Image Management</h2><div class="bg-white p-6 rounded-lg shadow"><div class="mb-4 p-4 bg-blue-50 border-l-4 border-blue-400 text-blue-700"><p class="font-bold">Инфо</p><p>Този панел показва файловете в <strong>/srv/pxeboss/images</strong>. За да добавиш нов образ, качи .vmdk или .qcow2 файл в тази директория и използвай бутона "Convert Cmd", за да видиш командата за конвертиране към .img формат.</p></div><div class="overflow-x-auto"><table class="min-w-full divide-y divide-gray-200"><thead class="bg-gray-50"><tr><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Filename</th><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Size (MB)</th><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Last Modified</th><th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">Actions</th></tr></thead><tbody id="images-table" class="bg-white divide-y divide-gray-200"></tbody></table></div></div></div>
                <div data-view-content="admin" class="view-content hidden"><h2 class="text-3xl font-bold mb-6">Network & Server Settings</h2><div id="settings-container" class="bg-white p-8 rounded-lg shadow max-w-4xl mx-auto"><p class="text-center text-gray-500">Loading settings...</p></div></div>
            </main>
        </div>
    </div>
    <div id="client-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50"><div class="relative top-20 mx-auto p-5 border w-full max-w-lg shadow-lg rounded-md bg-white"><div class="mt-3"><h3 id="modal-title" class="text-lg leading-6 font-medium text-gray-900 text-center">Add New Client</h3><form id="client-form" class="mt-4 space-y-4"><input type="hidden" id="client-id"><div><label for="client-name" class="block text-sm font-medium text-gray-700">Client Name</label><input type="text" id="client-name" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3" required></div><div><label for="client-mac" class="block text-sm font-medium text-gray-700">MAC Address</label><input type="text" id="client-mac" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3" required></div><div><label for="client-os-image" class="block text-sm font-medium text-gray-700">OS Image</label><select id="client-os-image" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"></select></div><div><label for="client-bootloader" class="block text-sm font-medium text-gray-700">Bootloader</label><select id="client-bootloader" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"><option value="ipxe.pxe">iPXE (ipxe.pxe)</option><option value="undionly.kpxe">UNDI (undionly.kpxe)</option><option value="pxelinux.0">PXELINUX (pxelinux.0)</option></select></div><p id="modal-error" class="text-red-500 text-sm hidden"></p><div class="px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse"><button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 sm:ml-3 sm:w-auto sm:text-sm">Save Client</button><button type="button" id="modal-cancel-btn" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 sm:mt-0 sm:w-auto sm:text-sm">Cancel</button></div></form></div></div></div>
    <div id="command-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 h-full w-full hidden z-50"><div class="relative top-20 mx-auto p-5 border w-full max-w-2xl shadow-lg rounded-md bg-white"><div class="mt-3"><h3 class="text-lg font-medium text-gray-900">Conversion Command</h3><p class="text-sm text-gray-500 mt-2">Копирай тази команда и я изпълни в терминала на сървъра.</p><div class="mt-4"><textarea id="command-text" readonly class="w-full h-24 p-2 font-mono text-sm bg-gray-100 rounded border border-gray-300"></textarea></div><div class="mt-4 text-right"><button id="close-command-modal" class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md hover:bg-gray-600">Close</button></div></div></div></div>
    
    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const token = localStorage.getItem('accessToken'); if (!token) { window.location.href = '/login'; return; }
        const headers = { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' };
        
        const clientModal = document.getElementById('client-modal'); const commandModal = document.getElementById('command-modal');
        const clientForm = document.getElementById('client-form');
        const pendingTable = document.getElementById('pending-clients-table'); const registeredTable = document.getElementById('registered-clients-table'); const imagesTable = document.getElementById('images-table');
        const settingsContainer = document.getElementById('settings-container');
        const elements = { header: { time: document.getElementById('server-time'), sysUptime: document.getElementById('system-uptime'), appUptime: document.getElementById('app-uptime')}, stats: { active: document.getElementById('stats-active-clients'), images: document.getElementById('stats-images'), pending: document.getElementById('stats-pending'), alarms: document.getElementById('stats-alarms') }, bars: { cpu: { bar: document.getElementById('cpu-percent-bar'), text: document.getElementById('cpu-percent-text') }, ram: { bar: document.getElementById('ram-percent-bar'), text: document.getElementById('ram-percent-text') }, disk: { bar: document.getElementById('disk-percent-bar'), text: document.getElementById('disk-percent-text') } }, logs: document.getElementById('logsContainer') };
        
        async function fetchWithAuth(url, options = {}) { try { const response = await fetch(url, { headers, ...options }); if (response.status === 401) { localStorage.removeItem('accessToken'); window.location.href = '/login'; throw new Error('Unauthorized'); } if (response.status === 204) { return true; } const data = await response.json(); if (!response.ok) { throw new Error(data.detail || 'API Error'); } return data; } catch (error) { console.error(`Fetch error for ${url}:`, error); throw error; } }
        
        async function updateDashboardData() { try { const [stats, monitor, logs] = await Promise.all([ fetchWithAuth('/api/dashboard/stats'), fetchWithAuth('/api/dashboard/monitor'), fetchWithAuth('/api/clients/logs?limit=100') ]); elements.header.time.textContent = monitor.server_time || 'N/A'; elements.header.sysUptime.textContent = monitor.system_uptime || 'N/A'; elements.header.appUptime.textContent = monitor.app_uptime || 'N/A'; elements.stats.active.textContent = stats.active_clients; elements.stats.images.textContent = stats.images; elements.stats.pending.textContent = stats.pending; elements.stats.alarms.textContent = stats.alarms; elements.stats.alarms.className = 'text-3xl font-semibold ' + (stats.alarms > 0 ? 'text-red-500' : 'text-green-500'); const cpu = monitor.cpu_percent || 0, ram = monitor.ram_percent || 0, disk = monitor.disk_percent || 0; elements.bars.cpu.bar.style.width = cpu + '%'; elements.bars.cpu.text.textContent = cpu.toFixed(1) + '%'; elements.bars.ram.bar.style.width = ram + '%'; elements.bars.ram.text.textContent = ram.toFixed(1) + '%'; elements.bars.disk.bar.style.width = disk + '%'; elements.bars.disk.text.textContent = disk.toFixed(1) + '%'; if (elements.logs && Array.isArray(logs)) { elements.logs.innerHTML = logs.map(l => `<div><span class="text-gray-500">${new Date(l.timestamp).toLocaleTimeString()}</span> <span class="text-yellow-400">[${l.level}]</span> ${l.message}</div>`).join(''); } } catch (error) { console.error("Dashboard update failed:", error); } }
        async function renderClientsPage() { try { const [pending, registered, disks] = await Promise.all([ fetchWithAuth('/api/clients/pending'), fetchWithAuth('/api/clients'), fetchWithAuth('/api/clients/disks') ]); window.pxeDisks = disks; pendingTable.innerHTML = pending.length === 0 ? '<tr><td colspan="3" class="px-6 py-4 text-center text-gray-500">No pending clients</td></tr>' : pending.map(c => `<tr data-mac="${c.mac_address}"><td class="px-6 py-4 font-mono">${c.mac_address}</td><td class="px-6 py-4 text-sm text-gray-500">${new Date(c.last_seen).toLocaleString()}</td><td class="px-6 py-4 text-right"><button class="deny-btn font-medium text-red-600 hover:text-red-800 mr-4">Deny</button><button class="approve-btn font-medium text-green-600 hover:text-green-800">Approve</button></td></tr>`).join(''); registeredTable.innerHTML = registered.length === 0 ? '<tr><td colspan="5" class="px-6 py-4 text-center text-gray-500">No registered clients</td></tr>' : registered.map(c => `<tr data-client-id="${c.id}" data-client-info='${JSON.stringify(c)}'><td class="px-6 py-4 font-medium text-gray-900">${c.name}</td><td class="px-6 py-4 font-mono">${c.mac_address}</td><td class="px-6 py-4">${c.os_image ? c.os_image.name : 'N/A'}</td><td class="px-6 py-4"><div class="relative inline-block w-10 mr-2 align-middle select-none"><input type="checkbox" class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer" ${c.is_enabled ? 'checked' : ''}><label class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer"></label></div></td><td class="px-6 py-4 text-right"><button class="edit-btn font-medium text-indigo-600 hover:text-indigo-800 mr-4">Edit</button><button class="delete-btn font-medium text-red-600 hover:text-red-800">Delete</button></td></tr>`).join(''); } catch(error) { console.error("Failed to render clients page:", error); } }
        async function renderImagesPage() { try { const images = await fetchWithAuth('/api/images'); imagesTable.innerHTML = '<tr><td colspan="4" class="px-6 py-4 text-center text-gray-500">Loading...</td></tr>'; imagesTable.innerHTML = ''; if (images.length === 0) { imagesTable.innerHTML = '<tr><td colspan="4" class="px-6 py-4 text-center text-gray-500">No image files found.</td></tr>'; return; } images.forEach(img => { let cmd = '# Raw .img file. No conversion needed.'; const ext = img.name.split('.').pop().toLowerCase(); if (['vmdk', 'qcow2'].includes(ext)) { const newName = img.name.replace(`.${ext}`, '.img'); cmd = `qemu-img convert -p -f ${ext} -O raw /srv/pxeboss/images/${img.name} /srv/pxeboss/images/${newName}`; } imagesTable.innerHTML += `<tr><td class="px-6 py-4 font-mono">${img.name}</td><td class="px-6 py-4">${img.size_mb.toFixed(2)}</td><td class="px-6 py-4">${new Date(img.modified_date).toLocaleString()}</td><td class="px-6 py-4 text-right"><button class="show-command-btn font-medium text-blue-600 hover:text-blue-800" data-command="${cmd}">Convert Cmd</button></td></tr>`; }); } catch(error) { imagesTable.innerHTML = `<tr><td colspan="4" class="px-6 py-4 text-center text-red-500">Error: ${error.message}</td></tr>`; } }
        async function renderSettingsPage() { try { const settings = await fetchWithAuth('/api/settings'); if (!settings) return; settingsContainer.innerHTML = `<form id="settings-form" class="space-y-6"><div><h3 class="text-lg font-medium text-gray-900">Server Configuration</h3><div class="mt-4 grid grid-cols-1 gap-y-6 sm:grid-cols-2 sm:gap-x-4"><div><label for="server_ip" class="block text-sm font-medium text-gray-700">Server IP</label><input type="text" id="server_ip" value="${settings.server_ip}" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"></div><div><label for="interface" class="block text-sm font-medium text-gray-700">Interface</label><input type="text" id="interface" value="${settings.interface}" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"></div></div></div><hr><div><h3 class="text-lg font-medium text-gray-900">DHCP & Network Configuration</h3><div class="mt-4 grid grid-cols-1 gap-y-6 sm:grid-cols-2 sm:gap-x-4"><div><label for="gateway_ip" class="block text-sm font-medium text-gray-700">Gateway IP</label><input type="text" id="gateway_ip" value="${settings.gateway_ip}" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"></div><div><label for="dns_server" class="block text-sm font-medium text-gray-700">DNS Server IP</label><input type="text" id="dns_server" value="${settings.dns_server}" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"></div><div><label for="dhcp_range_start" class="block text-sm font-medium text-gray-700">DHCP Range Start</label><input type="text" id="dhcp_range_start" value="${settings.dhcp_range_start}" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"></div><div><label for="dhcp_range_end" class="block text-sm font-medium text-gray-700">DHCP Range End</label><input type="text" id="dhcp_range_end" value="${settings.dhcp_range_end}" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"></div></div><div class="mt-4"><label class="block text-sm font-medium text-gray-700">DHCP Mode</label><fieldset class="mt-2"><div class="flex items-center space-x-4"><div class="flex items-center"><input id="dhcp_mode_auth" name="dhcp_mode" type="radio" value="authoritative" class="h-4 w-4" ${settings.dhcp_mode==='authoritative' ? 'checked':'' }><label for="dhcp_mode_auth" class="ml-3 text-sm text-gray-700">Authoritative</label></div><div class="flex items-center"><input id="dhcp_mode_proxy" name="dhcp_mode" type="radio" value="proxy" class="h-4 w-4" ${settings.dhcp_mode==='proxy' ? 'checked':'' }><label for="dhcp_mode_proxy" class="ml-3 text-sm text-gray-700">Proxy</label></div></div></fieldset></div></div><hr><div><h3 class="text-lg font-medium text-gray-900">Client Settings</h3><div class="mt-4 flex items-center"><input id="auto_add_pending_clients" type="checkbox" class="h-4 w-4 rounded" ${settings.auto_add_pending_clients ? 'checked' : ''}><label for="auto_add_pending_clients" class="ml-3 block text-sm font-medium text-gray-700">Auto-add unknown clients for approval</label></div></div><div class="pt-5"><div class="flex justify-end"><button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md">Save Settings</button></div><p id="settings-save-status" class="text-sm mt-4 text-center"></p></div></form>`;
                document.getElementById('settings-form').addEventListener('submit', async(e)=>{ e.preventDefault(); const statusEl=document.getElementById('settings-save-status'); statusEl.textContent='Saving...'; statusEl.className='text-sm mt-4 text-center text-gray-500'; const settingsData={ server_ip:document.getElementById('server_ip').value, interface:document.getElementById('interface').value, gateway_ip:document.getElementById('gateway_ip').value, dns_server:document.getElementById('dns_server').value, dhcp_range_start:document.getElementById('dhcp_range_start').value, dhcp_range_end:document.getElementById('dhcp_range_end').value, dhcp_mode:document.querySelector('input[name="dhcp_mode"]:checked').value, auto_add_pending_clients:document.getElementById('auto_add_pending_clients').checked,}; try { const response=await fetchWithAuth('/api/settings',{method:'POST',body:JSON.stringify(settingsData)}); statusEl.textContent=response.message||'Settings saved successfully!'; statusEl.className='text-sm mt-4 text-center text-green-600'; } catch(error){ statusEl.textContent=`Error: ${error.message}`; statusEl.className='text-sm mt-4 text-center text-red-600'; }}); } catch(error){ settingsContainer.innerHTML=`<p class="text-center text-red-500">Failed to load settings: ${error.message}</p>`; } }
        function openClientModal(mode = 'add', clientData = {}) { /* ... */ }
        
        // --- EVENT LISTENERS ---
        document.getElementById('add-client-btn').addEventListener('click', () => openClientModal());
        // ... (всички останали listeners) ...

        // --- ГЛАВНА НАВИГАЦИЯ И ИНИЦИАЛИЗАЦИЯ ---
        function switchView(viewName) {
            document.querySelectorAll('.view-content').forEach(c => c.classList.add('hidden'));
            const activeView = document.querySelector(`[data-view-content="${viewName}"]`);
            if (activeView) activeView.classList.remove('hidden');
            document.querySelectorAll('.nav-link').forEach(l => { l.classList.remove('active'); if (l.dataset.view === viewName) l.classList.add('active'); });
            window.location.hash = viewName;
            if (viewName === 'dashboard') updateDashboardData();
            if (viewName === 'clients') renderClientsPage();
            if (viewName === 'images') renderImagesPage();
            if (viewName === 'admin') renderSettingsPage();
        }
        document.getElementById('main-nav').addEventListener('click', (e) => { const link = e.target.closest('a.nav-link'); if (link) { e.preventDefault(); const view = link.dataset.view; if (view) switchView(view); } });
        document.getElementById('logoutButton').addEventListener('click', () => { localStorage.removeItem('accessToken'); window.location.href = '/login'; });
        
        function initializeApp() {
            const currentView = window.location.hash.substring(1) || 'dashboard';
            switchView(currentView);
            setInterval(updateDashboardData, 5000);
        }
        initializeApp();
    });
    </script>
</body>
</html>
EOF

chown -R "$APP_USER":"$APP_USER" "$PROJECT_DIR"
echo "✅ Frontend generated successfully (Complete with Settings)!"